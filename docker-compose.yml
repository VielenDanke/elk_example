version: '3.2'

services:
  create_certs:
    container_name: create_certs
    image: docker.elastic.co/elasticsearch/elasticsearch:$ELASTIC_VERSION
    command: >      
      bash -c '
        if [[ ! -f ./config/certificates/elastic-certificates.p12 ]]; then
          bin/elasticsearch-certutil cert -out config/certificates/elastic-certificates.p12 -pass ""
        fi;
        chown -R 1000:0 /usr/share/elasticsearch/config/certificates
        '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes:
      - type: volume
        source: certs
        target: /usr/share/elasticsearch/config/certificates
        
  elasticsearch:
    container_name: elasticsearch
    hostname: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:$ELASTIC_VERSION
    environment:
      - http.host=0.0.0.0
      - discovery.type=single-node
      - ELASTIC_PASSWORD=$ES_PASSWORD  
      - xpack.security.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.keystore.path=/usr/share/elasticsearch/config/certificates/elastic-certificates.p12
      - xpack.security.transport.ssl.truststore.path=/usr/share/elasticsearch/config/certificates/elastic-certificates.p12
      - "ES_JAVA_OPTS=-Xms${ES_JVM_HEAP} -Xmx${ES_JVM_HEAP}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - type: bind
        source: $ES_MOUNT_DRIVE
        target: /usr/share/elasticsearch/data      
      - type: volume
        source: certs
        target: /usr/share/elasticsearch/config/certificates
    ports:
      - 9200:9200
    networks:
      - elk_stack
    healthcheck:
      test: ["CMD", "curl","-s" ,"-f", "-u", "elastic:${ES_PASSWORD}", "http://localhost:9200/_cat/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - create_certs       

  kibana:
    container_name: kibana
    hostname: kibana
    image: docker.elastic.co/kibana/kibana:$ELASTIC_VERSION
    volumes:
      - type: bind
        source: $KIBANA_CONFIG_PATH/kibana.yml
        target: /usr/share/kibana/config/kibana.yml  
    ports:
      - 5601:5601
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/login"]
      retries: 6
    networks:
      - elk_stack
    depends_on:
      - elasticsearch
      
  logstash:
    image: docker.elastic.co/logstash/logstash:$ELASTIC_VERSION
    volumes:
      - type: bind
        source: $LOGSTASH_CONFIG_DRIVE/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: $LOGSTASH_CONFIG_DRIVE/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - 5000:5000/tcp
      - 5000:5000/udp
      - 9600:9600  
    restart: always    
    networks:
      - elk_stack
    depends_on:
      - kibana
      - elasticsearch

volumes:
  certs:              

networks:
  elk_stack:
      driver: bridge
      ipam:
        driver: default
        config:
        # default docker compose subnet(172.177.0.0/16), which may overlap with existing services on home network.
        # use this configuration to update to a different subnet
        - subnet: 192.168.1.0/24
