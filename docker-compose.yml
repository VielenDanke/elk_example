version: '3.2'

services:
  elasticsearch:
    container_name: elasticsearch
    hostname: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:$ELASTIC_VERSION
    environment:
      - http.host=0.0.0.0
      - discovery.type=single-node
      - ELASTIC_PASSWORD=$ES_PASSWORD  
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true 
      - xpack.security.http.ssl.key=$CERTS_DIR/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.enabled=true 
      - xpack.security.transport.ssl.verification_mode=certificate 
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/elasticsearch/elasticsearch.key
      - "ES_JAVA_OPTS=-Xms${ES_JVM_HEAP} -Xmx${ES_JVM_HEAP}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - type: bind
        source: $ELK_STACK_DIR/elasticsearch/data
        target: /usr/share/elasticsearch/data      
      - type: bind
        source: $ELK_STACK_DIR/certificates
        target: $CERTS_DIR 
    ports:
      - 9200:9200
    networks:
      - elk_stack
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5       

  kibana:
    container_name: kibana
    hostname: kibana
    image: docker.elastic.co/kibana/kibana:$ELASTIC_VERSION
    volumes:
      - type: bind
        source: $ELK_STACK_DIR/certificates
        target: $CERTS_DIR
      - type: bind
        source: $ELK_STACK_DIR/kibana/kibana.yml
        target: /usr/share/kibana/config/kibana.yml    
    ports:
      - 5601:5601
    networks:
      - elk_stack
    healthcheck:
      test: curl -u elastic:$ES_PASSWORD --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:5601/api/status || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - elasticsearch
      
  logstash:
    image: docker.elastic.co/logstash/logstash:$ELASTIC_VERSION
    volumes:
      - type: bind
        source: $ELK_STACK_DIR/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: $ELK_STACK_DIR/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
      - type: bind
        source: $ELK_STACK_DIR/certificates
        target: $CERTS_DIR
    ports:
      - 9600:9600  
    restart: always    
    networks:
      - elk_stack
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9600 || exit 1
      interval: 30s
      timeout: 10s
      retries: 5      
    depends_on:
      - kibana
      - elasticsearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:$ELASTIC_VERSION      
    volumes:
      - type: bind
        source: $ELK_STACK_DIR/filebeat/filebeat.yml
        target: /usr/share/filebeat/filebeat.yml
      - type: bind
        source: $ELK_STACK_DIR/certificates
        target: $CERTS_DIR
      - type: bind
        source: $ELK_STACK_DIR/filebeat/dockerlogs
        target: /usr/share/dockerlogs/data
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    networks:
      - elk_stack
    depends_on:
      - kibana
      - logstash
      - elasticsearch

networks:
  elk_stack:
      driver: bridge
      ipam:
        driver: default
        config:
        # default docker compose subnet(172.177.0.0/16), which may overlap with existing services on home network.
        # use this configuration to update to a different subnet
        - subnet: 192.168.1.0/24
