version: '3'

services:
  create_certs:
    container_name: create_certs
    image: docker.elastic.co/elasticsearch/elasticsearch:$ELASTIC_VERSION
    command: >      
      bash -c '
        if [[ ! -f ./config/certificates/elastic-certificates.p12 ]]; then
          bin/elasticsearch-certutil cert -out config/certificates/elastic-certificates.p12 -pass ""
        fi;
        chown -R 1000:0 /usr/share/elasticsearch/config/certificates
        '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes: ['certs:/usr/share/elasticsearch/config/certificates']
        
  elasticsearch:
    container_name: elasticsearch
    hostname: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:$ELASTIC_VERSION
    environment:
      - path.data=$ES_MOUNT_DRIVE
      - http.port=9200
      - http.host=0.0.0.0
      - http.cors.enabled=true
      - http.cors.allow-credentials=true
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization,WWW-Authenticate
      - discovery.type=single-node
      - http.cors.allow-origin=/https?:\/\/localhost(:[0-9]+)?/
      - transport.host=127.0.0.1
      - bootstrap.memory_lock=true
      - ELASTIC_PASSWORD=$ES_PASSWORD  
      - xpack.security.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.keystore.path=/usr/share/elasticsearch/config/certificates/elastic-certificates.p12
      - xpack.security.transport.ssl.truststore.path=/usr/share/elasticsearch/config/certificates/elastic-certificates.p12
      - "ES_JAVA_OPTS=-Xms${ES_JVM_HEAP} -Xmx${ES_JVM_HEAP}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - $ES_MOUNT_DRIVE:/usr/share/elasticsearch/data
      - certs:/usr/share/elasticsearch/config/certificates
    ports:
      - 9200:9200
    networks: ['elk_stack']
    healthcheck:
      test: ["CMD", "curl","-s" ,"-f", "-u", "elastic:${ES_PASSWORD}", "http://localhost:9200/_cat/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on: ['create_certs']       

  kibana:
    container_name: kibana
    hostname: kibana
    image: docker.elastic.co/kibana/kibana:$ELASTIC_VERSION
    environment:
      - ELASTICSEARCH_USERNAME=$ES_USERNAME
      - ELASTICSEARCH_PASSWORD=$ES_PASSWORD
      - server.port=127.0.0.1:5601
      - elasticsearch.url="http://elasticsearch:9200"
      - server.name="kibana"
    ports:
      - 5601:5601
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/login"]
      retries: 6
    networks: ['elk_stack']
    depends_on: ['elasticsearch']
      
  logstash:
    image: docker.elastic.co/logstash/logstash:$ELASTIC_VERSION
    volumes:
      - /home/vielen/Documents/elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - /home/vielen/Documents/elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - 5000:5000
    networks: ['elk_stack']
    depends_on: ['kibana', 'elasticsearch']

volumes:
  certs:              

networks:
  elk_stack:
      driver: bridge
      ipam:
        driver: default
        config:
        # default docker compose subnet(172.177.0.0/16), which may overlap with existing services on home network.
        # use this configuration to update to a different subnet
        - subnet: 192.168.1.0/24
